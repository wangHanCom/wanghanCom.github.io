(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{376:function(e,a,t){"use strict";t.r(a);var s=t(42),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"devserver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#devserver"}},[e._v("#")]),e._v(" devServer")]),e._v(" "),t("h2",{attrs:{id:"安装配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装配置"}},[e._v("#")]),e._v(" 安装配置")]),e._v(" "),t("p",[e._v("安装webpack-dev-server")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//安装\nnpm install webpack-dev-server -D\n\n")])])]),t("p",[e._v("webpack文件配置devserver")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//在webpack.config.js中配置\nmodule.exports={\n    devServer:{//开发服务器的配置\n        port:3000,               //指定运行的端口号\n        progress:true,           //显示打包的进度条\n        contentBase:'./build',   //打开指定目录\n        compress:true,           //启动压缩\n    },\n}\n")])])]),t("h2",{attrs:{id:"启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[e._v("#")]),e._v(" 启动")]),e._v(" "),t("p",[e._v("启动webpack-dev-server有2种方式：")]),e._v(" "),t("ul",[t("li",[e._v("通过cmd line")]),e._v(" "),t("li",[e._v("通过Node.js API")])]),e._v(" "),t("p",[e._v("方式一：在cmd直接运行")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//运行\nnpx webpack-dev-server // ==> Project is running at http://localhost:8080/   运行后只加载到根目录\n")])])]),t("p",[e._v("输出结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("➜  webpack-code-splitting-demo-code-splitting npx webpack-dev-server\nProject is running at http://localhost:8080/\nwebpack output is served from /\n404s will fallback to /index.html\n")])])]),t("p",[e._v("方式二：在package.json中配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"scripts": {\n    "dev":"webpack-dev-server"\n  },\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm run dev //运行\n")])])]),t("h2",{attrs:{id:"其他配置项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他配置项"}},[e._v("#")]),e._v(" 其他配置项")]),e._v(" "),t("h3",{attrs:{id:"contentbase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contentbase"}},[e._v("#")]),e._v(" contentBase")]),e._v(" "),t("p",[e._v("devServer.contentBase 配置 DevServer HTTP 服务器的文件根目录。 默认情况下为当前执行目录，通常是项目根目录，所有一般情况下你不必设置它，除非你有额外的文件需要被 DevServer 服务。")]),e._v(" "),t("p",[e._v("cmd")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("webpack-dev-server --content-base ./dist\n")])])]),t("p",[e._v("配置文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//在webpack.config.js中配置\nmodule.exports={\n    devServer:{//开发服务器的配置\n        contentBase:'./build',   //打开指定目录\n    },\n}\n")])])]),t("p",[e._v("以上任选一种方式")]),e._v(" "),t("p",[e._v("输出结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("➜  webpack-code-splitting-demo-code-splitting npx webpack-dev-server --content-base ./dist\nProject is running at http://localhost:8080/\nwebpack output is served from /\nContent not from webpack is served from /Users/wanghan/实战/webpack打包练习/webpack-code-splitting-demo-code-splitting/dist\n404s will fallback to /index.html\n")])])]),t("h3",{attrs:{id:"自动刷新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动刷新"}},[e._v("#")]),e._v(" 自动刷新")]),e._v(" "),t("p",[e._v("webpack-dev-server支持2种自动刷新的方式：")]),e._v(" "),t("ul",[t("li",[e._v("Iframe mode")]),e._v(" "),t("li",[e._v("inline mode")])]),e._v(" "),t("p",[e._v("DevServer 的实时预览功能==依赖一个注入到页面里的代理客户端去接受来自 DevServer 的命令和负责刷新网页的工作。==\nIframe mode和Inline mode最后达到的效果都是一样的，都是监听文件的变化，然后再将编译后的文件推送到前端，完成页面的reload的。")]),e._v(" "),t("h4",{attrs:{id:"inline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inline"}},[e._v("#")]),e._v(" inline")]),e._v(" "),t("p",[e._v("devServer.inline 用于配置是否自动注入这个代理客户端到将运行在页面里的 Chunk 里去，默认是会自动注入。如果开启 inline，DevServer 会在构建完变化后的代码时通过代理客户端控制网页刷新。\n使用inline mode的时候，cmd line需要写成：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("webpack-dev-server --inline\n")])])]),t("p",[e._v("访问地址")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("localhost:8080/index.html\n")])])]),t("p",[e._v("输出结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("➜  webpack-code-splitting-demo-code-splitting npx webpack-dev-server --inline\nProject is running at http://localhost:8080/\nwebpack output is served from /\n404s will fallback to /index.html\n")])])]),t("h4",{attrs:{id:"iframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iframe"}},[e._v("#")]),e._v(" iframe")]),e._v(" "),t("p",[e._v("通过 iframe 的方式去运行要开发的网页，当构建完变化后的代码时通过刷新 iframe 来实现实时预览。 但这时你需要去 "),t("code",[e._v("http://localhost:8080/webpack-dev-server/")]),e._v(" 实时预览你的网页了。Iframe mode是在网页中嵌入了一个iframe，将我们自己的应用注入到这个iframe当中去，因此每次你修改的文件后，都是这个iframe进行了reload。（原理不理解）")]),e._v(" "),t("p",[e._v("使用iframe访问时")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//在webpack.config.js中配置\nmodule.exports={\n    devServer:{//开发服务器的配置\n        inline:false,  //关闭line，默认开启iframe\n    },\n}\n")])])]),t("p",[e._v("访问地址")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("localhost:8080/webpack-dev-server/\n")])])]),t("p",[e._v("输出结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("➜  webpack-code-splitting-demo-code-splitting npx webpack-dev-server\nProject is running at http://localhost:8080/webpack-dev-server/\nwebpack output is served from /\n404s will fallback to /index.html\n")])])]),t("h3",{attrs:{id:"hot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hot"}},[e._v("#")]),e._v(" hot")]),e._v(" "),t("p",[e._v("devServer.hot 配置是否启用模块热替换功能。 DevServer 默认的行为是在发现源代码被更新后会通过自动刷新整个页面来做到实时预览，开启模块热替换功能后将==在不刷新整个页面的情况下通过用新模块替换老模块来做到实时预览==。除了通过重新刷新整个网页来实现实时预览，DevServer 还有一种被称作模块热替换的刷新技术。 模块热替换能做到在不重新加载整个网页的情况下，通过将被更新过的模块替换老的模块，再重新执行一次来实现实时预览。 模块热替换相对于默认的刷新机制能提供更快的响应和更好的开发体验。（问题：与动态刷新的区别）")]),e._v(" "),t("h3",{attrs:{id:"其他配置项-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他配置项-2"}},[e._v("#")]),e._v(" 其他配置项")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("--quiet 控制台中不输出打包的信息\n--compress 开启gzip压缩\n--progress 显示打包的进度\n")])])]),t("p",[e._v("参考链接")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000006670084",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-dev-server使用方法，看完还不会的来找我~"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.xbhub.com/wiki/webpack/2%E9%85%8D%E7%BD%AE/2-6DevServer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("2-6DevServer"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);