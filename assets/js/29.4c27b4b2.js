(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{374:function(e,t,r){"use strict";r.r(t);var n=r(42),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"router"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[e._v("#")]),e._v(" router")]),e._v(" "),r("h2",{attrs:{id:"基本概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),r("p",[e._v("通过Vue.use(VueRouter)和VueRouter构造函数==得到一个router的实例对象==，这个对象是一个全局对象。它包含了所有的路由以及许多关键的对象和属性。")]),e._v(" "),r("h2",{attrs:{id:"route"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#route"}},[e._v("#")]),e._v(" route")]),e._v(" "),r("p",[e._v("route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象。==$route对象表示当前的路由信息==，包含了当前 URL 解析得到的信息。包含当前的路径，参数，query对象等。")]),e._v(" "),r("h2",{attrs:{id:"基本用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import Router from 'vue-router'\nVue.use(Router)\nconst routes = [\n   {\n    path: '/student',\n    name: 'student',\n    component: Layout,\n    meta: { title: '学生信息查询', icon: 'documentation', roles: ['student'] },\n    children: [\n      {\n        path: 'info',\n        component: () => import('@/views/student/info'),\n        name: 'studentInfo',\n        meta: { title: '信息查询', icon: 'form' }\n      },\n      {\n        path: 'score',\n        component: () => import('@/views/student/score'),\n        name: 'studentScore',\n        meta: { title: '成绩查询', icon: 'score' }\n      }\n    ]\n  }\n  ...\n];\nconst router = new Router({\n  mode: \"history\",//设置路由的模式\n  routes,//配置当前的路由\n});\nnew Vue({\n    router,\n    store,\n    render: h => h(App)\n}).$mount(\"#app\");\n\n")])])]),r("h2",{attrs:{id:"动态路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态路由"}},[e._v("#")]),e._v(" 动态路由")]),e._v(" "),r("p",[e._v("当使用路由参数时，例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。")]),e._v(" "),r("p",[e._v("复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch (监测变化) $route 对象：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const User = {\n  template: '...',\n  watch: {\n    $route(to, from) {\n      // 对路由变化作出响应...\n    }\n  }\n}\n")])])]),r("p",[e._v("或者使用 beforeRouteUpdate 导航守卫：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const User = {\n  template: '...',\n  beforeRouteUpdate (to, from, next) {\n    // react to route changes...\n    // don't forget to call next()\n  }\n}\n")])])]),r("h2",{attrs:{id:"命名视图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#命名视图"}},[e._v("#")]),e._v(" 命名视图")]),e._v(" "),r("p",[e._v("有时候想==同时 (同级) 展示多个视图，而不是嵌套展示==，例如创建一个布局，有 sidebar (侧导航) 和 main (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('\x3c!-- UserSettings.vue --\x3e\n<div>\n  <h1>User Settings</h1>\n  <NavBar/>\n  <router-view/>\x3c!-- 没有设置名字，默认default --\x3e\n  <router-view name="helper"/>\n</div>\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("{\n  path: '/settings',\n  // 你也可以在顶级路由就配置命名视图\n  component: UserSettings,\n  children: [{\n    path: 'emails',\n    component: UserEmailsSubscriptions\n  }, {\n    path: 'profile',\n    components: {\n      default: UserProfile,//对应没有设置名字的router-view\n      helper: UserProfilePreview\n    }\n  }]\n}\n")])])]),r("h2",{attrs:{id:"编程式导航"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编程式导航"}},[e._v("#")]),e._v(" 编程式导航")]),e._v(" "),r("p",[e._v("如果提供了 path，params 会被忽略。下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const userId = '123'\nrouter.push({ name: 'user', params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// 这里的 params 不生效，错误写法\nrouter.push({ path: '/user', params: { userId }}) // -> /user\n")])])]),r("h2",{attrs:{id:"导航守卫"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#导航守卫"}},[e._v("#")]),e._v(" 导航守卫")]),e._v(" "),r("ol",[r("li",[e._v("导航被触发。")]),e._v(" "),r("li",[e._v("在失活的组件里调用 beforeRouteLeave 守卫。")]),e._v(" "),r("li",[e._v("调用全局的 beforeEach 守卫。")]),e._v(" "),r("li",[e._v("在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。")]),e._v(" "),r("li",[e._v("在路由配置里调用 beforeEnter。")]),e._v(" "),r("li",[e._v("解析异步路由组件。")]),e._v(" "),r("li",[e._v("在被激活的组件里调用 beforeRouteEnter。")]),e._v(" "),r("li",[e._v("调用全局的 beforeResolve 守卫 (2.5+)。")]),e._v(" "),r("li",[e._v("导航被确认。")]),e._v(" "),r("li",[e._v("调用全局的 afterEach 钩子。")]),e._v(" "),r("li",[e._v("触发 DOM 更新。")]),e._v(" "),r("li",[e._v("用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。")])]),e._v(" "),r("h2",{attrs:{id:"权限管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#权限管理"}},[e._v("#")]),e._v(" 权限管理")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("//在路由中配置\nconst route = {\n  /**\n   * remote support 模块\n   */\n  path: '/remoteSupport',\n  name: 'remoteSupport',\n  component: RemoteSupport,\n  meta: {\n    title: 'Remote Support',\n    inNavigator: true,\n    svgIcon: 'remote',\n    naviName: 'remoteSupport',\n    permission: ['view:remoteSupport'],\n  },\n  children: [],\n  、、、\n}\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("//在路由守卫中判断\n //无权限访问的页面，跳转回首页\n    if (to.meta.permission && !can(to.meta.permission)) {\n        return '/'\n    }\n\n")])])]),r("p",[e._v("参考链接")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.im/post/6844903818203758600",target:"_blank",rel:"noopener noreferrer"}},[e._v("VueRouter源码分析"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.cnblogs.com/czy960731/p/9288830.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue2.0中的$router 和 $route的区别"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/6844903943449870350",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue-cli2.0中$router和$route的区别"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/6844903890278694919",target:"_blank",rel:"noopener noreferrer"}},[e._v("「前端进阶」彻底弄懂前端路由"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/6844903648057622536",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue权限路由实现方式总结"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);